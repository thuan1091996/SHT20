;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;
;//-----------------0.Documentation section--------------------//
;Project : SHT20 - ATMega8 communication using I2C display with LCD 16x2
;This program using ATMega8 I2C to read the temp and humility of SHT20
;Then display the value through LED 16x2
;Process: 	- Implementation LCD display  (OK)
;			- Implementation I2C		  (OK)
;			- Reading value of SHT20
;				a. Display receive value to LCD with TWI lib: Failed with TWI library, 3 receive data are the same
;				b. Display receive value to LCD with I2C lib
;Version : 1.0
;Date    : 7/03/2019
;Author  : Tran Minh Thuan (ItachiVN)
;Company : Viet Mold Machine
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;//-----------------1. Pre-processor Directives Section --------------------//
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>       // Alphanumeric LCD library
;#include <delay.h>      // Delay library
;#include <twi.h>        // TWI library
;#include <stdio.h>
;#include <stdlib.h>
;//-----------------2. Global declaration section--------------------//
;#define ERROR_I2C_TIMEOUT                     998
;#define ERROR_BAD_CRC                         999
;#define SHT20_ADDR	                          0x40
;#define TRIGGER_TEMP_MEASURE_HOLD             0xE3
;#define TRIGGER_HUMD_MEASURE_HOLD             0xE5
;#define TRIGGER_TEMP_MEASURE_NOHOLD           0xF3
;#define TRIGGER_HUMD_MEASURE_NOHOLD           0xF5
;#define WRITE_USER_REG                        0xE6
;#define READ_USER_REG                         0xE7
;#define SOFT_RESET                            0xFE
;#define USER_REGISTER_RESOLUTION_MASK         0x81
;#define USER_REGISTER_RESOLUTION_RH12_TEMP14  0x00
;#define USER_REGISTER_RESOLUTION_RH8_TEMP12   0x01
;#define USER_REGISTER_RESOLUTION_RH10_TEMP13  0x80
;#define USER_REGISTER_RESOLUTION_RH11_TEMP11  0x81
;#define USER_REGISTER_END_OF_BATTERY          0x40
;#define USER_REGISTER_HEATER_ENABLED          0x04
;#define USER_REGISTER_DISABLE_OTP_RELOAD      0x02
;#define MAX_WAIT                              100
;#define DELAY_INTERVAL                        10
;#define SHIFTED_DIVISOR                       0x988000
;#define MAX_COUNTER                           (MAX_WAIT/DELAY_INTERVAL) // 100/10=10
;/* --------------------Global variable----------------------*/
;unsigned char Data_Recv[5]={0};			//Pointer to data receive of slave I2C
;unsigned char Data_Disp[16]={0};
;unsigned int System_fail=0;             //Monitor CRC fails
;/* --------------------Function decleration---------------------*/
;unsigned int Read_SHT20(unsigned char u8cmd);
;unsigned char CheckCRC(unsigned int message_from_sensor, unsigned char check_value_from_sensor);
;float ReadTemperature_SHT20(void);
;float ReadHumidity_SHT20(void);
;void Display_Number(unsigned char numb);
;/* --------------------Function definition---------------------*/
;void main(void)
; 0000 0048 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0049     twi_master_init(100); //TWI initialization 100 kHz
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 004A     lcd_init(16);         //LCD initialization 16x2
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004B     #asm("sei")           // Global enable interrupts
;PCODE: $00000013 VOL: 0
	sei
;PCODE: $00000014 VOL: 0
; 0000 004C 	while (1)
;PCODE: $00000015 VOL: 0
; 0000 004D     {
; 0000 004E         float Temp=0;
; 0000 004F         float Humi=0;
; 0000 0050         Temp=ReadTemperature_SHT20();
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;	Temp -> Y+4
;	Humi -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0051         if(Temp!=0)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0052         {
; 0000 0053             lcd_gotoxy(0,0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0054             lcd_puts("Nhiet do: ");
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0055             ftoa(Temp,3,Data_Disp);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0056             lcd_puts(Data_Disp);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0057         }
; 0000 0058         else System_fail++;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0059         Humi= ReadHumidity_SHT20();
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005A         if(Humi!=0)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005B         {
; 0000 005C             lcd_gotoxy(0,1);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005D             lcd_puts("Do am: ");
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005E             ftoa(Humi,3,Data_Disp);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005F             lcd_puts(Data_Disp);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0060         }
; 0000 0061         else System_fail++;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0062         Display_Number(System_fail);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0063         delay_ms(100);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0064 
; 0000 0065     }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0066 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0

	.DSEG
_0x7:
	.BYTE 0x13
;/* Read SHT by sending proper command
;   Input: 8-bit command (Table 6- Datasheet)
;   Output: 14 -bit received from SHT20 or 0 if wrong data
;   Note:
;*/
;unsigned int Read_SHT20(unsigned char u8cmd)
; 0000 006D {

	.CSEG
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 006E     unsigned char Command_Send[5]={0};	  //Pointer to data array send to Slave I2C
; 0000 006F     unsigned int u16_datarecv=0;
; 0000 0070     Command_Send[0]=u8cmd;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;	u8cmd -> Y+7
;	Command_Send -> Y+2
;	u16_datarecv -> R16,R17
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0071     twi_master_trans(SHT20_ADDR,&Command_Send[0],2,0,0);                //send request
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0072     delay_ms(100);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0073     if(twi_master_trans(SHT20_ADDR,&Command_Send[2],0,&Data_Recv[0],3)) //if data collect is true
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0074     {
; 0000 0075         u16_datarecv=(Data_Recv[0]<<8)|Data_Recv[1];
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0076         if(CheckCRC(u16_datarecv,Data_Recv[2])!=0) return 0;            //return 0 if CRC is wrong
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0077         else u16_datarecv=u16_datarecv&0xFFFC;                          //14-bit resolution
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0078     }
;PCODE: $000000A7 VOL: 0
; 0000 0079     return u16_datarecv;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 007A }
;PCODE: $000000AD VOL: 0
;
;/* Read SHT20 Temperature
;   Input: None
;   Output: Float number of Temperature
;   Note:
;*/
;float ReadTemperature_SHT20(void)
; 0000 0082 {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0083     float tempTemperature=0;
; 0000 0084     float realTemperature=0;
; 0000 0085     unsigned int rawTemperature = Read_SHT20(TRIGGER_TEMP_MEASURE_NOHOLD);
; 0000 0086     if(rawTemperature!=0) //No error CRC occur
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;	tempTemperature -> Y+6
;	realTemperature -> Y+2
;	rawTemperature -> R16,R17
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0087     {
; 0000 0088          tempTemperature = rawTemperature * (175.72 / 65536.0);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0089          realTemperature = tempTemperature - 46.85;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 008A     }
; 0000 008B     return (realTemperature);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 008C }
;PCODE: $000000D5 VOL: 0
;
;/* Read SHT20 Humidity
;   Input: None
;   Output: Float number of Humidity
;   Note:
;*/
;float ReadHumidity_SHT20(void)
; 0000 0094 {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0095     float tempRH=0;
; 0000 0096     float rh=0;
; 0000 0097     unsigned int rawHumidity = Read_SHT20(TRIGGER_HUMD_MEASURE_NOHOLD);
; 0000 0098     if(rawHumidity!=0)
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;	tempRH -> Y+6
;	rh -> Y+2
;	rawHumidity -> R16,R17
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0099     {
; 0000 009A         tempRH = rawHumidity * (125.0 / 65536.0);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 009B         rh = tempRH - 6.0;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 009C     }
; 0000 009D     return (rh);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 009E }
;PCODE: $000000FD VOL: 0
;
;/* Display_Number through LCD
;   Input: numb to display
;   Output: none
;   Note: 0<numb<99
;*/
;void Display_Number(unsigned char numb)
; 0000 00A6 {
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00A7     unsigned char tens=0,digit=0;
; 0000 00A8     tens=numb/10;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;	numb -> Y+2
;	tens -> R17
;	digit -> R16
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00A9     digit=numb%(tens*10);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00AA     lcd_gotoxy(14,1);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00AB     lcd_putchar(tens+'0');
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00AC     lcd_gotoxy(15,1);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00AD     lcd_putchar(digit+'0');
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00AE }
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;
;unsigned char CheckCRC(unsigned int message_from_sensor, unsigned char check_value_from_sensor)
; 0000 00B1 {
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00B2     unsigned long int remainder=0,divsor=0;
; 0000 00B3     unsigned char i=0;
; 0000 00B4     remainder = (unsigned long int)message_from_sensor << 8;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;	message_from_sensor -> Y+10
;	check_value_from_sensor -> Y+9
;	remainder -> Y+5
;	divsor -> Y+1
;	i -> R17
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00B5     remainder |= check_value_from_sensor;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00B6     divsor = SHIFTED_DIVISOR;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00B7     for(i = 0 ; i < 16 ; i++){
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00B8         if(remainder & (unsigned long int)1 << (23 - i))
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00B9 		{
; 0000 00BA             remainder ^= divsor;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00BB         }
; 0000 00BC         divsor >>= 1;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00BD     }
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00BE     return (unsigned char)remainder;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00BF }
;PCODE: $0000016D VOL: 0
;
